# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Model

    Model(;
        id=nothing,
        name=nothing,
        description=nothing,
        created_at=nothing,
        parameters=nothing,
    )

    - id::String
    - name::String
    - description::String
    - created_at::ZonedDateTime
    - parameters::Dict{String, Any}
"""
Base.@kwdef mutable struct Model <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    parameters::Union{Nothing, Dict{String, Any}} = nothing

    function Model(id, name, description, created_at, parameters, )
        OpenAPI.validate_property(Model, Symbol("id"), id)
        OpenAPI.validate_property(Model, Symbol("name"), name)
        OpenAPI.validate_property(Model, Symbol("description"), description)
        OpenAPI.validate_property(Model, Symbol("created_at"), created_at)
        OpenAPI.validate_property(Model, Symbol("parameters"), parameters)
        return new(id, name, description, created_at, parameters, )
    end
end # type Model

const _property_types_Model = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("created_at")=>"ZonedDateTime", Symbol("parameters")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ Model }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Model[name]))}

function check_required(o::Model)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Model }, name::Symbol, val)




    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Model", :format, val, "date-time")
    end

end
