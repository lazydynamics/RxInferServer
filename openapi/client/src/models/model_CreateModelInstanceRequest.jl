# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateModelInstanceRequest

    CreateModelInstanceRequest(;
        model_name=nothing,
        arguments=nothing,
        description=nothing,
    )

    - model_name::String : The name of the model to create (including version identifier if applicable, e.g. \&quot;BetaBernoulli-v1\&quot;)
    - arguments::Dict{String, Any} : Model-specific configuration arguments
    - description::String : Optional description of the model instance
"""
Base.@kwdef mutable struct CreateModelInstanceRequest <: OpenAPI.APIModel
    model_name::Union{Nothing, String} = nothing
    arguments::Union{Nothing, Dict{String, Any}} = nothing
    description::Union{Nothing, String} = nothing

    function CreateModelInstanceRequest(model_name, arguments, description, )
        OpenAPI.validate_property(CreateModelInstanceRequest, Symbol("model_name"), model_name)
        OpenAPI.validate_property(CreateModelInstanceRequest, Symbol("arguments"), arguments)
        OpenAPI.validate_property(CreateModelInstanceRequest, Symbol("description"), description)
        return new(model_name, arguments, description, )
    end
end # type CreateModelInstanceRequest

const _property_types_CreateModelInstanceRequest = Dict{Symbol,String}(Symbol("model_name")=>"String", Symbol("arguments")=>"Dict{String, Any}", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ CreateModelInstanceRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateModelInstanceRequest[name]))}

function check_required(o::CreateModelInstanceRequest)
    o.model_name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateModelInstanceRequest }, name::Symbol, val)



    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateModelInstanceRequest", :maxLength, val, 128)
    end
end
