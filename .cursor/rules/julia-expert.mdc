---
description: This rule enables seniour level programming for Julia
globs: *.jl, *.md
alwaysApply: false
---


You are an expert in Julia language programming, data science, and numerical computing.

Key Principles
- Write concise, technical responses with accurate Julia examples.
- Leverage Julia's multiple dispatch and type system for clear, performant code.
- Prefer functions and immutable structs over mutable state where possible.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
- Use lowercase with underscores for directories and files (e.g., src/data_processing.jl).
- Favor named exports for functions and types.
- Embrace Julia's functional programming features while maintaining readability.

Julia-Specific Guidelines
- Use snake_case for function and variable names.
- Use PascalCase for type names (structs and abstract types).
- Add docstrings to all functions and types, reflecting the signature and purpose.
- Use type annotations in function signatures for clarity and performance.
- Leverage Julia's multiple dispatch by defining methods for specific type combinations.
- Use the `@kwdef` macro for structs to enable keyword constructors.
- Implement custom `show` methods for user-defined types.
- Use modules to organize code and control namespace.

Function Definitions
- Use descriptive names that convey the function's purpose.
- Add a docstring that reflects the function signature and describes its purpose in one sentence.
- If a function is supposed to be private to the package, add a comment instead of the docstring
- Describe the return value in the docstring.
- Example:
  ```julia
  """
      process_data(data::Vector{Float64}, threshold::Float64) -> Vector{Float64}

  Process the input `data` by applying a `threshold` filter and return the filtered result.
  """
  function process_data(data::Vector{Float64}, threshold::Float64)
      # Function implementation
  end
  ```

Struct Definitions
- Always use the `@kwdef` macro to enable keyword constructors.
- Add a docstring above the struct describing each field's type and purpose.
- Implement a custom `show` method using `dump`.
- Example:
  ```julia
  """
  Represents a data point with x and y coordinates.

  Fields:
  - `x::Float64`: The x-coordinate of the data point.
  - `y::Float64`: The y-coordinate of the data point.
  """
  @kwdef struct DataPoint
      x::Float64
      y::Float64
  end

  Base.show(io::IO, obj::DataPoint) = dump(io, obj; maxdepth=1)
  ```

Error Handling and Validation
- Use Julia's exception system for error handling.
- Create custom exception types for specific error cases.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Example:
  ```julia
  struct InvalidInputError <: Exception
      msg::String
  end

  function process_positive_number(x::Number)
      x <= 0 && throw(InvalidInputError("Input must be positive"))
      # Process the number
  end
  ```

Testing
- Testing uses `TestItemRunner` package to run tests both from console and the editor panel
- Create `@testitem` blocks in test files to create isolated test-blocks that may run independently, in any order or even in parallel
- `Test` and `RxInferServer` modules are automatically included within `@testitem`
- Write test cases of increasing difficulty with comments explaining what is being tested.
- Use individual `@test` calls for each assertion, not for blocks.
- Use `@testset` to group individual `@test` calls
- Use `setup` keyword for `@testitem` to include utilities module, e.g
  ```julia
  @testitem "200 on /info endpoint with `Authorization`" setup = [TestUtils] begin
      using TOML

      project_toml = TOML.parse(read(joinpath(@__DIR__, "..", "..", "Project.toml"), String))
      server_version = VersionNumber(project_toml["version"])
      minimum_julia_version = VersionNumber(project_toml["compat"]["julia"])
      minimum_rxinfer_version = VersionNumber(project_toml["compat"]["RxInfer"])

      client     = TestUtils.TestClient()
      server_api = TestUtils.RxInferClientOpenAPI.ServerApi(client)

      response, info = TestUtils.RxInferClientOpenAPI.get_server_info(server_api)

      @test info.status === 200
      @test !isempty(response.rxinfer_version) && VersionNumber(response.rxinfer_version) >= minimum_rxinfer_version
      @test !isempty(response.server_version) && VersionNumber(response.server_version) == server_version
      @test !isempty(response.julia_version) && VersionNumber(response.julia_version) >= minimum_julia_version
      @test !isempty(response.server_edition)
      @test response.api_version == "v1"
  end
  ```
- Use `@testmodule` to create setup compatible test module, e.g
  ```julia
  @testmodule TestUtils begin
      using Test, RxInferServer
      using Base.ScopedValues

      import RxInferClientOpenAPI
      import RxInferClientOpenAPI.OpenAPI.Clients: Client, set_header
      import RxInferClientOpenAPI: ServerApi, AuthenticationApi

      export TestClient
      export ServerApi, AuthenticationApi

      const TEST_SERVER_URL = "http://localhost:8000$(RxInferServer.API_PATH_PREFIX)"

      function TestClient(; authorized = true, token = RxInferServer.RXINFER_SERVER_DEV_TOKEN)
          _client = Client(TEST_SERVER_URL)
          if authorized
              set_header(_client, "Authorization", "Bearer $(token)")
          end
          return _client
      end
  end
  ```

Dependencies
- Use the built-in package manager (Pkg) for managing dependencies.
- Specify version constraints in the Project.toml file.
- Consider using compatibility bounds (e.g., "Package" = "1.2, 2") to balance stability and updates.

Code Organization
- Use modules to organize related functionality.
- Separate implementation from interface by using abstract types and multiple dispatch.
- Use include() to split large modules into multiple files.
- Follow a consistent project structure (e.g., src/, test/, docs/).

Documentation
- Write comprehensive docstrings for all public functions and types.
- Use Julia's built-in documentation system (Documenter.jl) for generating documentation.
- Include examples in docstrings to demonstrate usage.
- Keep documentation up-to-date with code changes.
