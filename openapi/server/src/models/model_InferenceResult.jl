# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""InferenceResult

    InferenceResult(;
        model_id=nothing,
        results=nothing,
        metadata=nothing,
    )

    - model_id::String
    - results::Dict{String, Any}
    - metadata::Dict{String, Any}
"""
Base.@kwdef mutable struct InferenceResult <: OpenAPI.APIModel
    model_id::Union{Nothing, String} = nothing
    results::Union{Nothing, Dict{String, Any}} = nothing
    metadata::Union{Nothing, Dict{String, Any}} = nothing

    function InferenceResult(model_id, results, metadata, )
        OpenAPI.validate_property(InferenceResult, Symbol("model_id"), model_id)
        OpenAPI.validate_property(InferenceResult, Symbol("results"), results)
        OpenAPI.validate_property(InferenceResult, Symbol("metadata"), metadata)
        return new(model_id, results, metadata, )
    end
end # type InferenceResult

const _property_types_InferenceResult = Dict{Symbol,String}(Symbol("model_id")=>"String", Symbol("results")=>"Dict{String, Any}", Symbol("metadata")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ InferenceResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InferenceResult[name]))}

function check_required(o::InferenceResult)
    o.model_id === nothing && (return false)
    o.results === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ InferenceResult }, name::Symbol, val)



end
