# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelCreationRequest

    ModelCreationRequest(;
        name=nothing,
        description=nothing,
        model_type=nothing,
        parameters=nothing,
    )

    - name::String
    - description::String
    - model_type::String
    - parameters::Dict{String, Any}
"""
Base.@kwdef mutable struct ModelCreationRequest <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    model_type::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Dict{String, Any}} = nothing

    function ModelCreationRequest(name, description, model_type, parameters, )
        OpenAPI.validate_property(ModelCreationRequest, Symbol("name"), name)
        OpenAPI.validate_property(ModelCreationRequest, Symbol("description"), description)
        OpenAPI.validate_property(ModelCreationRequest, Symbol("model_type"), model_type)
        OpenAPI.validate_property(ModelCreationRequest, Symbol("parameters"), parameters)
        return new(name, description, model_type, parameters, )
    end
end # type ModelCreationRequest

const _property_types_ModelCreationRequest = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("model_type")=>"String", Symbol("parameters")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ ModelCreationRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelCreationRequest[name]))}

function check_required(o::ModelCreationRequest)
    o.name === nothing && (return false)
    o.model_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ModelCreationRequest }, name::Symbol, val)



    if name === Symbol("model_type")
        OpenAPI.validate_param(name, "ModelCreationRequest", :enum, val, ["linear", "nonlinear", "custom"])
    end


end
