# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function create_model_read(handler)
    function create_model_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["ModelCreationRequest"] = OpenAPI.Servers.to_param_type(ModelCreationRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function create_model_validate(handler)
    function create_model_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function create_model_invoke(impl; post_invoke=nothing)
    function create_model_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.create_model(req::HTTP.Request, openapi_params["ModelCreationRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_model_read(handler)
    function delete_model_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["modelId"] = OpenAPI.Servers.to_param(String, path_params, "modelId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_model_validate(handler)
    function delete_model_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_model_invoke(impl; post_invoke=nothing)
    function delete_model_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_model(req::HTTP.Request, openapi_params["modelId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_model_by_id_read(handler)
    function get_model_by_id_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["modelId"] = OpenAPI.Servers.to_param(String, path_params, "modelId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_model_by_id_validate(handler)
    function get_model_by_id_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_model_by_id_invoke(impl; post_invoke=nothing)
    function get_model_by_id_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_model_by_id(req::HTTP.Request, openapi_params["modelId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_models_read(handler)
    function list_models_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_models_validate(handler)
    function list_models_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function list_models_invoke(impl; post_invoke=nothing)
    function list_models_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_models(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function run_inference_read(handler)
    function run_inference_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["modelId"] = OpenAPI.Servers.to_param(String, path_params, "modelId", required=true, )
        openapi_params["InferenceRequest"] = OpenAPI.Servers.to_param_type(InferenceRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function run_inference_validate(handler)
    function run_inference_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function run_inference_invoke(impl; post_invoke=nothing)
    function run_inference_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.run_inference(req::HTTP.Request, openapi_params["modelId"], openapi_params["InferenceRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerDefaultApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/models", OpenAPI.Servers.middleware(impl, create_model_read, create_model_validate, create_model_invoke; optional_middlewares...))
    HTTP.register!(router, "DELETE", path_prefix * "/models/{modelId}", OpenAPI.Servers.middleware(impl, delete_model_read, delete_model_validate, delete_model_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/models/{modelId}", OpenAPI.Servers.middleware(impl, get_model_by_id_read, get_model_by_id_validate, get_model_by_id_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/models", OpenAPI.Servers.middleware(impl, list_models_read, list_models_validate, list_models_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/models/{modelId}/inference", OpenAPI.Servers.middleware(impl, run_inference_read, run_inference_validate, run_inference_invoke; optional_middlewares...))
    return router
end
