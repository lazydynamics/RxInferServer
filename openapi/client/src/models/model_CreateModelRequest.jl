# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateModelRequest

    CreateModelRequest(;
        model=nothing,
        arguments=nothing,
        description=nothing,
    )

    - model::String : The name of the model to create (including version identifier if applicable, e.g. \&quot;BetaBernoulli-v1\&quot;)
    - arguments::Dict{String, Any} : Model-specific configuration arguments
    - description::String : Optional description of the model instance
"""
Base.@kwdef mutable struct CreateModelRequest <: OpenAPI.APIModel
    model::Union{Nothing, String} = nothing
    arguments::Union{Nothing, Dict{String, Any}} = nothing
    description::Union{Nothing, String} = nothing

    function CreateModelRequest(model, arguments, description, )
        OpenAPI.validate_property(CreateModelRequest, Symbol("model"), model)
        OpenAPI.validate_property(CreateModelRequest, Symbol("arguments"), arguments)
        OpenAPI.validate_property(CreateModelRequest, Symbol("description"), description)
        return new(model, arguments, description, )
    end
end # type CreateModelRequest

const _property_types_CreateModelRequest = Dict{Symbol,String}(Symbol("model")=>"String", Symbol("arguments")=>"Dict{String, Any}", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ CreateModelRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateModelRequest[name]))}

function check_required(o::CreateModelRequest)
    o.model === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateModelRequest }, name::Symbol, val)



    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateModelRequest", :maxLength, val, 128)
    end
end
